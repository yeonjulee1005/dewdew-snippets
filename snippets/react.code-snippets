{
  "Dewdew React Functional Component": {
    "prefix": "ddrfc",
    "body": [
      "import React from 'react'",
      "",
      "interface ${1:Props} {",
      "  ${2:title?: string}",
      "}",
      "",
      "export const ${1:Component}: React.FC<${1:Props}> = ({ ${2:title} }) => {",
      "  return (",
      "    <div>",
      "      ${2:title}",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "React Create Functional Component"
  },
  "Dewdew React Functional Component with Hooks": {
    "prefix": "ddrfch",
    "body": [
      "import React, { useState, useEffect, useCallback, useMemo } from 'react'",
      "",
      "interface ${1:Props} {",
      "  ${2:title?: string}",
      "}",
      "",
      "export const ${1:Component}: React.FC<${1:Props}> = ({ ${2:title} }) => {",
      "  const [${3:count}, set${3:count}] = useState<${4:number}>(${5:0})",
      "  ",
      "  const ${6:doubleCount} = useMemo(() => {",
      "    return ${3:count} * 2",
      "  }, [${3:count}])",
      "  ",
      "  const ${7:increment} = useCallback(() => {",
      "    set${3:count}(${3:count} + 1)",
      "  }, [${3:count}])",
      "  ",
      "  useEffect(() => {",
      "    console.log('Component mounted')",
      "    ",
      "    return () => {",
      "      console.log('Component unmounted')",
      "    }",
      "  }, [])",
      "  ",
      "  return (",
      "    <div>",
      "      ${2:title}",
      "    </div>",
      "  )",
      "}",
      "",
      "export default $1"
    ],
    "description": "React 함수형 컴포넌트 + 훅"
  },
  "Dewdew React Custom Hook": {
    "prefix": "ddrcu",
    "body": [
      "import { useState, useEffect, useCallback } from 'react'",
      "",
      "export const use${1:Counter} = () => {",
      "  const [${2:count}, set${2:count}] = useState<${3:number}>(${4:0})",
      "  ",
      "  const ${5:increment} = useCallback(() => {",
      "    set${2:count}(${2:count} + 1)",
      "  }, [${2:count}])",
      "  ",
      "  useEffect(() => {",
      "    console.log('Component mounted')",
      "    ",
      "    return () => {",
      "      console.log('Component unmounted')",
      "    }",
      "  }, [])",
      "  ",
      "  return {",
      "    ${2:count},",
      "    ${5:increment},",
      "  }",
      "}"
    ],
    "description": "React Create Custom Hook"
  },
  "Dewdew React Context": {
    "prefix": "ddrc",
    "body": [
      "import React, { createContext, useContext, useReducer, ReactNode } from 'react'",
      "",
      "interface ${1:App}State {",
      "  ${2:count: number}",
      "  ${3:isLoading: boolean}",
      "  ${4:error: string | null}",
      "}",
      "",
      "interface ${1:App}Action {",
      "  type: '${5:INCREMENT}' | '${6:DECREMENT}' | '${7:SET_LOADING}' | '${8:SET_ERROR}'",
      "  payload?: any",
      "}",
      "",
      "const initialState: ${1:App}State = {",
      "  ${2:count: 0},",
      "  ${3:isLoading: false},",
      "  ${4:error: null},",
      "}",
      "",
      "const ${1:App}Context = createContext<{",
      "  state: ${1:App}State",
      "  dispatch: React.Dispatch<${1:App}Action>",
      "} | undefined>(undefined)",
      "",
      "const ${1:App}Reducer = (state: ${1:App}State, action: ${1:App}Action): ${1:App}State => {",
      "  switch (action.type) {",
      "    case '${5:INCREMENT}':",
      "      return {",
      "        ...state,",
      "        ${2:count: state.count + 1},",
      "      }",
      "    case '${6:DECREMENT}':",
      "      return {",
      "        ...state,",
      "        ${2:count: state.count - 1},",
      "      }",
      "    case '${7:SET_LOADING}':",
      "      return {",
      "        ...state,",
      "        ${3:isLoading: action.payload},",
      "      }",
      "    case '${8:SET_ERROR}':",
      "      return {",
      "        ...state,",
      "        ${4:error: action.payload},",
      "      }",
      "    default:",
      "      return state",
      "  }",
      "}",
      "",
      "export const ${1:App}Provider: React.FC<{ children: ReactNode }> = ({ children }) => {",
      "  const [state, dispatch] = useReducer(${1:App}Reducer, initialState)",
      "  ",
      "  return (",
      "    <${1:App}Context.Provider value={{ state, dispatch }}>",
      "      {children}",
      "    </${1:App}Context.Provider>",
      "  )",
      "}",
      "",
      "export const use${1:App} = () => {",
      "  const context = useContext(${1:App}Context)",
      "  if (!context) {",
      "    throw new Error('use${1:App} must be used within a ${1:App}Provider')",
      "  }",
      "  return context",
      "}"
    ],
    "description": "React Context + Reducer with TypeScript"
  },
  "Dewdew React Event Handler": {
    "prefix": "ddrev",
    "body": [
      "const handle${1:InputChange} = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "  const value = e.target.value",
      "  ${2:setValue(value)}",
      "}",
      "",
      "const handle${3:ButtonClick} = (e: React.MouseEvent<HTMLButtonElement>) => {",
      "  e.preventDefault()",
      "  ${4:handleSubmit()}",
      "}",
      "",
      "const handle${5:FormSubmit} = (e: React.FormEvent<HTMLFormElement>) => {",
      "  e.preventDefault()",
      "  ${6:submitForm()}",
      "}",
      "",
      "const handle${7:SelectChange} = (e: React.ChangeEvent<HTMLSelectElement>) => {",
      "  const value = e.target.value",
      "  ${8:setSelectedValue(value)}",
      "}",
      "",
      "const handle${9:CheckboxChange} = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "  const checked = e.target.checked",
      "  ${10:setIsChecked(checked)}",
      "}"
    ],
    "description": "React Event Handlers with TypeScript"
  }
}
