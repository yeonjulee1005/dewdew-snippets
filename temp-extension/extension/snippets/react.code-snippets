{
  "Dewdew Create React Functional Component": {
    "prefix": "ddrfc",
    "body": [
      "import React from 'react'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  ${2:title?: string}",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}: React.FC<${1:${TM_FILENAME_BASE}}Props> = ({ ${2:title} }) => {",
      "  return (",
      "    <div>",
      "      ${2:title}",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "React Create Functional Component"
  },
  "Dewdew Create React Functional Component with Hooks": {
    "prefix": "ddrfch",
    "body": [
      "import React, { useState, useEffect, useCallback, useMemo } from 'react'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  ${2:title?: string}",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}: React.FC<${1:${TM_FILENAME_BASE}}Props> = ({ ${2:title} }) => {",
      "  const [${3:count}, set${3:count}] = useState<${4:number}>(${5:0})",
      "  ",
      "  const ${6:doubleCount} = useMemo(() => {",
      "    return ${3:count} * 2",
      "  }, [${3:count}])",
      "  ",
      "  const ${7:increment} = useCallback(() => {",
      "    set${3:count}(${3:count} + 1)",
      "  }, [${3:count}])",
      "  ",
      "  useEffect(() => {",
      "    console.log('Component mounted')",
      "    ",
      "    return () => {",
      "      console.log('Component unmounted')",
      "    }",
      "  }, [])",
      "  ",
      "  return (",
      "    <div>",
      "      ${2:title}",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "React 함수형 컴포넌트 + 훅"
  },
  "Dewdew Create React Custom Hook": {
    "prefix": "ddrcu",
    "body": [
      "import { useState, useEffect, useCallback } from 'react'",
      "",
      "export const use${1:${TM_FILENAME_BASE}} = () => {",
      "  const [${2:count}, set${2:count}] = useState<${3:number}>(${4:0})",
      "  ",
      "  const ${5:increment} = useCallback(() => {",
      "    set${2:count}(${2:count} + 1)",
      "  }, [${2:count}])",
      "  ",
      "  useEffect(() => {",
      "    console.log('Component mounted')",
      "    ",
      "    return () => {",
      "      console.log('Component unmounted')",
      "    }",
      "  }, [])",
      "  ",
      "  return {",
      "    ${2:count},",
      "    ${5:increment},",
      "  }",
      "}"
    ],
    "description": "React Create Custom Hook"
  },

  "Dewdew Create Zustand Local Store": {
    "prefix": "ddzls",
    "body": [
      "import { create } from 'zustand'",
      "import { devtools } from 'zustand/middleware'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}State {",
      "  ${2:count: number}",
      "  ${3:isLoading: boolean}",
      "  ${4:error: string | null}",
      "}",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Actions {",
      "  ${5:increment: () => void}",
      "  ${6:decrement: () => void}",
      "  ${7:setLoading: (loading: boolean) => void}",
      "  ${8:setError: (error: string | null) => void}",
      "  ${9:reset: () => void}",
      "}",
      "",
      "const initialState: ${1:${TM_FILENAME_BASE}}State = {",
      "  ${2:count: 0},",
      "  ${3:isLoading: false}",
      "  ${4:error: null},",
      "}",
      "",
      "export const use${1:${TM_FILENAME_BASE}}Store = create<${1:${TM_FILENAME_BASE}}State & ${1:${TM_FILENAME_BASE}}Actions>()(",
      "  devtools(",
      "    (set, get) => ({",
      "      ...initialState,",
      "      ",
      "      ${5:increment}: () => {",
      "        set((state) => ({",
      "          ${2:count: state.${2:count} + 1",
      "        }))",
      "      },",
      "      ",
      "      ${6:decrement}: () => {",
      "        set((state) => ({",
      "          ${2:count: state.${2:count} - 1",
      "        }))",
      "      },",
      "      ",
      "      ${7:setLoading}: (loading) => {",
      "        set({ ${3:isLoading: loading })",
      "      },",
      "      ",
      "      ${8:setError}: (error) => {",
      "        set({ ${4:error })",
      "      },",
      "      ",
      "      ${9:reset}: () => {",
      "        set(initialState)",
      "      },",
      "    }),",
      "    {",
      "      name: '${1:${TM_FILENAME_BASE}}Store',",
      "    }",
      "  )",
      ")"
    ],
    "description": "Zustand Local State Management Store"
  },

  "Dewdew Create Zustand Global Store": {
    "prefix": "ddzgs",
    "body": [
      "import { create } from 'zustand'",
      "import { devtools, persist } from 'zustand/middleware'",
      "import { subscribeWithSelector } from 'zustand/middleware'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}State {",
      "  ${2:user: {",
      "    id: string",
      "    name: string",
      "    email: string",
      "    isAuthenticated: boolean",
      "  } | null}",
      "  ${3:theme: 'light' | 'dark'}",
      "  ${4:language: 'ko' | 'en'}",
      "  ${5:notifications: Array<{",
      "    id: string",
      "    message: string",
      "    type: 'info' | 'success' | 'warning' | 'error'",
      "    timestamp: number",
      "  }>}",
      "}",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Actions {",
      "  ${6:setUser: (user: ${1:Global}State['${2:user}']) => void}",
      "  ${7:logout: () => void}",
      "  ${8:toggleTheme: () => void}",
      "  ${9:setLanguage: (lang: 'ko' | 'en') => void}",
      "  ${10:addNotification: (notification: Omit<${1:Global}State['${5:notifications}'], 'id' | 'timestamp'>) => void}",
      "  ${11:removeNotification: (id: string) => void}",
      "  ${12:clearNotifications: () => void}",
      "}",
      "",
      "const initialState: ${1:${TM_FILENAME_BASE}}State = {",
      "  ${2:user: null},",
      "  ${3:theme: 'light'},",
      "  ${4:language: 'ko'},",
      "  ${5:notifications: []},",
      "}",
      "",
      "export const use${1:${TM_FILENAME_BASE}}Store = create<${1:${TM_FILENAME_BASE}}State & ${1:${TM_FILENAME_BASE}}Actions>()(",
      "  devtools(",
      "    persist(",
      "      subscribeWithSelector(",
      "        (set, get) => ({",
      "          ...initialState,",
      "          ",
      "          ${6:setUser}: (user) => {",
      "            set({ ${2:user })",
      "          },",
      "          ",
      "          ${7:logout}: () => {",
      "            set({ ${2:user: null })",
      "          },",
      "          ",
      "          ${8:toggleTheme}: () => {",
      "            set((state) => ({",
      "              ${3:theme: state.${3:theme} === 'light' ? 'dark' : 'light'",
      "            }))",
      "          },",
      "          ",
      "          ${9:setLanguage}: (lang) => {",
      "            set({ ${4:language: lang })",
      "          },",
      "          ",
      "          ${10:addNotification}: (notification) => {",
      "            const newNotification = {",
      "              ...notification,",
      "              id: Date.now().toString(),",
      "              timestamp: Date.now(),",
      "            }",
      "            set((state) => ({",
      "              ${5:notifications: [...state.${5:notifications}, newNotification]",
      "            }))",
      "          },",
      "          ",
      "          ${11:removeNotification}: (id) => {",
      "            set((state) => ({",
      "              ${5:notifications: state.${5:notifications}.filter(n => n.id !== id)",
      "            }))",
      "          },",
      "          ",
      "          ${12:clearNotifications}: () => {",
      "            set({ ${5:notifications: [] })",
      "          },",
      "        })",
      "      ),",
      "      {",
      "        name: '${1:${TM_FILENAME_BASE}}Store',",
      "        partialize: (state) => ({",
      "          ${3:theme: state.${3:theme},",
      "          ${4:language: state.${4:language},",
      "        }),",
      "      }",
      "    ),",
      "    {",
      "      name: '${1:${TM_FILENAME_BASE}}Store',",
      "    }",
      "  )",
      ")"
    ],
    "description": "Zustand Global State Management Store with Persistence"
  },
  "Dewdew Create React Context": {
    "prefix": "ddrc",
    "body": [
      "import React, { createContext, useContext, useReducer, ReactNode } from 'react'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}State {",
      "  ${2:count: number}",
      "  ${3:isLoading: boolean}",
      "  ${4:error: string | null}",
      "}",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Action {",
      "  type: '${5:INCREMENT}' | '${6:DECREMENT}' | '${7:SET_LOADING}' | '${8:SET_ERROR}'",
      "  payload?: any",
      "}",
      "",
      "const initialState: ${1:${TM_FILENAME_BASE}}State = {",
      "  ${2:count: 0},",
      "  ${3:isLoading: false},",
      "  ${4:error: null},",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}Context = createContext<{",
      "  state: ${1:${TM_FILENAME_BASE}}State",
      "  dispatch: React.Dispatch<${1:${TM_FILENAME_BASE}}Action>",
      "} | undefined>(undefined)",
      "",
      "const ${1:${TM_FILENAME_BASE}}Reducer = (state: ${1:${TM_FILENAME_BASE}}State, action: ${1:${TM_FILENAME_BASE}}Action): ${1:${TM_FILENAME_BASE}}State => {",
      "  switch (action.type) {",
      "    case '${5:INCREMENT}':",
      "      return {",
      "        ...state,",
      "        ${2:count: state.count + 1},",
      "      }",
      "    case '${6:DECREMENT}':",
      "      return {",
      "        ...state,",
      "        ${2:count: state.count - 1},",
      "      }",
      "    case '${7:SET_LOADING}':",
      "      return {",
      "        ...state,",
      "        ${3:isLoading: action.payload},",
      "      }",
      "    case '${8:SET_ERROR}':",
      "      return {",
      "        ...state,",
      "        ${4:error: action.payload},",
      "      }",
      "    default:",
      "      return state",
      "  }",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}Provider: React.FC<{ children: ReactNode }> = ({ children }) => {",
      "  const [state, dispatch] = useReducer(${1:${TM_FILENAME_BASE}}Reducer, initialState)",
      "  ",
      "  return (",
      "    <${1:${TM_FILENAME_BASE}}Context.Provider value={{ state, dispatch }}>",
      "      {children}",
      "    </${1:${TM_FILENAME_BASE}}Context.Provider>",
      "  )",
      "}",
      "",
      "export const use${1:${TM_FILENAME_BASE}} = () => {",
      "  const context = useContext(${1:${TM_FILENAME_BASE}}Context)",
      "  if (!context) {",
      "    throw new Error('use${1:${TM_FILENAME_BASE}} must be used within a ${1:${TM_FILENAME_BASE}}Provider')",
      "  }",
      "  return context",
      "}"
    ],
    "description": "React Context + Reducer with TypeScript"
  },
  "Dewdew Create React Event Handler": {
    "prefix": "ddrev",
    "body": [
      "const handle${1:${TM_FILENAME_BASE}InputChange} = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "  const value = e.target.value",
      "  ${2:setValue(value)}",
      "}",
      "",
      "const handle${3:${TM_FILENAME_BASE}ButtonClick} = (e: React.MouseEvent<HTMLButtonElement>) => {",
      "  e.preventDefault()",
      "  ${4:handleSubmit()}",
      "}",
      "",
      "const handle${5:${TM_FILENAME_BASE}FormSubmit} = (e: React.FormEvent<HTMLFormElement>) => {",
      "  e.preventDefault()",
      "  ${6:submitForm()}",
      "}",
      "",
      "const handle${7:${TM_FILENAME_BASE}SelectChange} = (e: React.ChangeEvent<HTMLSelectElement>) => {",
      "  const value = e.target.value",
      "  ${8:setSelectedValue(value)}",
      "}",
      "",
      "const handle${9:${TM_FILENAME_BASE}CheckboxChange} = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "  const checked = e.target.checked",
      "  ${10:setIsChecked(checked)}",
      "}"
    ],
    "description": "React Event Handlers with TypeScript"
  }
}
