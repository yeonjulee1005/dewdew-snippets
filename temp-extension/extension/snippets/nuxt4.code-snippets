{
  "Dewdew Create Nuxt4 Page": {
    "prefix": "ddn4p",
    "body": [
      "<script setup lang=\"ts\">",
      "useHead({",
      "  title: '${TM_FILENAME_BASE}',",
      "  meta: [",
      "    { name: 'description', content: '${TM_FILENAME_BASE} Page' }",
      "  ]",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    ${1: This is Page}",
      "  </div>",
      "</template>",
      "",
      "<style scoped lang=\"scss\">",
      "  ${2:/* Add your styles here */}",
      "</style>"
    ],
    "description": "Nuxt4 Create Page"
  },
  "Dewdew Create Nuxt4 Layout": {
    "prefix": "ddn4l",
    "body": [
      "<script setup lang=\"ts\">",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    ${1:/* Add your layout Architecture here */}",
      "  </div>",
      "</template>",
      "",
      "<style scoped lang=\"scss\">",
      "  ${2:/* Add your styles here */}",
      "</style>"
    ],
    "description": "Nuxt4 Create Layout"
  },
  "Dewdew Create Nuxt4 Component": {
    "prefix": "ddn4c",
    "body": [
      "<script setup lang=\"ts\">",
      "const props = withDefaults(",
      "  defineProps<{",
      "     ${1:title?: string}",
      "  }>(),",
      "  {",
      "    ${2:title: 'Title'}",
      "  }",
      ")",
      "",
      "const emit = defineEmits([",
      "  '${3:update-title}',",
      "])",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    ${1:This is Component}",
      "  </div>",
      "</template>",
      "",
      "<style scoped lang=\"scss\">",
      "  ${2:/* Add your styles here */}",
      "</style>"
    ],
    "description": "Nuxt4 Create Component"
  },
  "Dewdew Nuxt4 Create Composable": {
    "prefix": "ddn4cp",
    "body": [
      "<script setup lang=\"ts\">",
      "export const use${1:Counter} = () => {",
      "  const ${2:count} = useState('${2:count}', () => ${3:0})",
      "  ",
      "  const ${4:doubleCount} = computed(() => {",
      "    return ${2:count}.value * 2",
      "  })",
      "  ",
      "  const ${5:increment} = async () => {",
      "    try {",
      "      ${2:count}.value++",
      "    } catch (error) {",
      "      console.error('Error:', error)",
      "    }",
      "  }",
      "  ",
      "  return {",
      "    ${2:count},",
      "    ${4:doubleCount},",
      "    ${5:increment},",
      "  }",
      "}",
      "</script>"
    ],
    "description": "Nuxt4 Create Custom Composable"
  },
  "Dewdew Create Nuxt4 Server Route": {
    "prefix": "ddn4sr",
    "body": [
      "<script setup lang=\"ts\">",
      "export default defineEventHandler(async (event) => {",
      "  try {",
      "    const query = getQuery(event)",
      "    const ${1:param} = query.${2:param}",
      "    ",
      "    const body = await readBody(event)",
      "    ",
      "    ${3:const result = await processData(body)}",
      "    ",
      "    return {",
      "      success: true,",
      "      data: ${4:result},",
      "      timestamp: new Date().toISOString()",
      "    }",
      "  } catch (error) {",
      "    throw createError({",
      "      statusCode: 500,",
      "      statusMessage: error.message || 'Internal Server Error'",
      "    })",
      "  }",
      "})",
      "</script>"
    ],
    "description": "Nuxt4 Create Server Route"
  },
  "Dewdew Create Nuxt4 Middleware": {
    "prefix": "ddn4m",
    "body": [
      "<script setup lang=\"ts\">",
      "export default defineNuxtRouteMiddleware((to, from) => {",
      "  const { ${1:user} } = useNuxtApp()",
      "  ",
      "  if (!${1:user}) {",
      "    return navigateTo('/login')",
      "  }",
      "  ",
      "  ${2:/* Add your middleware logic here */}",
      "})",
      "</script>"
    ],
    "description": "Nuxt4 Create Middleware"
  },
  "Dewdew Create Nuxt4 Plugin": {
    "prefix": "ddn4pl",
    "body": [
      "<script setup lang=\"ts\">",
      "export default defineNuxtPlugin((nuxtApp) => {",
      "  nuxtApp.provide('${1:global-utility}', {",
      "    ${2:/* Add your global utility here */}",
      "  })",
      "  ",
      "  nuxtApp.${3:globalProperty} = ${4:/* Add your global property here */}",
      "  ",
      "  nuxtApp.hook('app:created', () => {",
      "    ${5:/* Add your app lifecycle hook here */}",
      "  })",
      "})",
      "</script>"
    ],
    "description": "Nuxt4 Create Plugin"
  }
}
